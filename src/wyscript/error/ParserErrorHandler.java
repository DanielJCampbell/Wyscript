package wyscript.error;

import static wyscript.util.SyntaxError.outputSourceError;

import java.util.List;

import wyscript.Main;
import wyscript.util.SyntaxError;

/**
 * Class that takes syntax errors generated by the WyScript Parser
 * and uses them to generate helpful error messages for the user.
 *
 * @author Daniel Campbell
 *
 */
public class ParserErrorHandler {

	public static void handle(List<ParserErrorData> errors) {

		for (ParserErrorData data : errors) {
			String msg = "blah";

			switch (data.type()) {

			//The generic case where a match failed. Simply tell them what was missing and where
			case MISSING_TOKEN:
				msg = String.format("Error: '%s' expected", data.expected());
				break;

			case BAD_INDENT:
				msg = "Error: indentation must not increase within a block";
				break;

			case DUPLICATE_TOKEN:
				msg = "Error: There already exists a record attribute with name " + data.found().text;
				break;

			case INVALID_TYPE:
				msg = "Error: <<type>> expected.\nNeed a base type, a list, a record, a union or a user defined type";
				break;

			case MISSING_EXPRESSION:
				msg = String.format("Error: found %s, required <<expression>>", data.found().kind);
				break;

			default:
				msg = handleExpr(data);
				break;
			}
			outputSourceError(Main.errout, msg, data.filename(), data.start(), data.end());
		}

		throw new HandledException();
	}

	/**
	 * Utility method that handles errors over a whole expression instead of a single token
	 */
	private static String handleExpr(ParserErrorData d) {
		ParserExprErrorData data = (ParserExprErrorData) d;

		switch (data.type()) {

		case BAD_EXPRESSION_TYPE:
			return String.format("Error: expression %s cannot be assigned to.\nExpression must be a %s", data.expr(), data.expected());

		default:
			throw new SyntaxError("Unknown parser error occurred on token " + d.found(), d.filename(), d.start(), d.end());
		}
	}
}
